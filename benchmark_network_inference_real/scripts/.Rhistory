axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'bottom')
p2 = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_void() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c() +
ylab('UMAP_2') +
xlab('UMAP_1') +
theme(text = element_text(size = 18),
axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'bottom')
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "UMAP_ct.png")), plot = p1, width = 4, height = 4)
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "UMAP_sim_time.png")), plot = p2, width = 4, height = 4)
p1 = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=cell_types)) +
geom_point() +
scale_color_brewer(palette = "Set2") +
theme_half_open() +
labs(color = "Cell Types") +
ylab('UMAP_2') +
xlab('UMAP_1') +
theme(text = element_text(size = 14),
axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'bottom')
p2 = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c() +
ylab('UMAP_2') +
xlab('UMAP_1') +
theme(text = element_text(size = 14),
axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'bottom')
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "UMAP_ct.png")), plot = p1, width = 4, height = 4)
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "UMAP_sim_time.png")), plot = p2, width = 4, height = 4)
p1 = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=cell_types)) +
geom_point() +
scale_color_brewer(palette = "Set2") +
theme_half_open() +
labs(color = "Cell Types") +
ylab('UMAP_2') +
xlab('UMAP_1') +
theme(text = element_text(size = 14),
axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'right')
p2 = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c() +
ylab('UMAP_2') +
xlab('UMAP_1') +
theme(text = element_text(size = 14),
axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'right')
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "UMAP_ct.png")), plot = p1, width = 5, height = 4)
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "UMAP_sim_time.png")), plot = p2, width = 5, height = 4)
##### load in the expression profiles ######
exp_df = read.csv("../output/plot_UMAPs/myeloid_progenitors_full/big_sim_df.csv", header = FALSE, row.names = 1)
exp_df = t(exp_df)
exp_df = as.data.frame(exp_df)
rownames(exp_df) = exp_df$V1
exp_df$V1 = NULL
for(temp_gene in colnames(exp_df)) {
plotting_UMAP_coord = UMAP_coord[, c('UMAP_1', 'UMAP_2', temp_gene)]
colnames(plotting_UMAP_coord) = c('UMAP_1', 'UMAP_2', 'expression')
plotting_UMAP_coord = plotting_UMAP_coord[order(plotting_UMAP_coord$expression), ]
p_gene = ggplot(plotting_UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=expression)) +
geom_point() +
theme_half_open() +
labs(color = temp_gene) +
scale_colour_viridis_c(option = 'plasma')
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, paste0(temp_gene, "_UMAP.png"))), plot = p_gene, width = 4, height = 4)
}
library(ggplot2)
library(stringr)
library(dplyr)
library(viridis)
library(cowplot)
output_path = "../output/sim_ss_comparison"
dir.create(output_path, recursive = TRUE)
datatype = 'myeloid_progenitors_full'
ss_path = "../output/extract_states/myeloid_progenitors_full/"
curate_ss <- function(ss_path) {
state_df = data.frame()
for(temp_file in list.files(ss_path)) {
temp_state_df = read.csv(file.path(ss_path, temp_file), row.names = 1)
if(ncol(state_df) == 0) {
state_df = temp_state_df
} else {
state_df = cbind(state_df, temp_state_df)
}
}
state_df = state_df[!duplicated(as.list(state_df))]
return(state_df)
}
calc_max_sim <- function(reference_state, sim_states) {
all_percent_agree = c()
for(unique_ss in colnames(sim_states)) {
num_diff = sum(abs(sim_states[, unique_ss] - reference_state))
percent_agree = 1 - (num_diff / length(reference_state))
all_percent_agree = c(all_percent_agree, percent_agree)
}
return(max(all_percent_agree))
}
state_df = curate_ss(ss_path)
plot_df = data.frame()
for(temp_method in list.files(file.path("../output/steady_states/", datatype))) {
print(temp_method)
sim_states = read.csv(file.path("../output/steady_states/", datatype, temp_method, "density/unique_steady_states.csv"), row.names = 1)
for(temp_state in colnames(state_df)) {
print(temp_state)
reference_state = state_df[, temp_state]
temp_plot_df = data.frame('methods' = c(temp_method),
'states' = c(temp_state),
'percent_agreement' = calc_max_sim(reference_state, sim_states))
plot_df = rbind(plot_df, temp_plot_df)
}
}
##### get the iqcell steady states ######
pt_paths = list.dirs("../output/iQcell_simulations/myeloid_progenitors_full/", recursive = FALSE, full.names = FALSE)
multiple_read_df <- function(x) {
return(read.csv(file.path("../output/iQcell_simulations/myeloid_progenitors_full/", x, "in_out/ABNfiles/9.2_profilesOutput.csv"), stringsAsFactors=FALSE))
}
all_iqcell_states = lapply(pt_paths, multiple_read_df) %>%
Reduce(function(x, y) rbind(x, y), .) %>%
t()
all_iqcell_states = all_iqcell_states[rownames(state_df), ]
all_iqcell_states = as.data.frame(all_iqcell_states)
all_iqcell_states =  all_iqcell_states %>% mutate_all(as.numeric)
#all_iqcell_states = as.numeric(all_iqcell_states)
for(temp_state in colnames(state_df)) {
print(temp_state)
reference_state = state_df[, temp_state]
temp_plot_df = data.frame('methods' = c('iQcell'),
'states' = c(temp_state),
'percent_agreement' = calc_max_sim(reference_state, all_iqcell_states))
plot_df = rbind(plot_df, temp_plot_df)
}
plot_df = plot_df[plot_df$states %in% c('Erythrocytes', 'Granulocytes', 'Monocytes', 'MK'), ]
plot_df$percent_agreement = round(plot_df$percent_agreement, 2)
plot_df[plot_df$methods == 'run_OneSC', 'methods'] = 'OneSC'
plot_df$methods = toupper(plot_df$methods)
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Methods") +
xlab("Data Type") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Methods") +
xlab("Data Type") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_flip()
p
colnames(cat_ss)
colnames(plot_df)
plot_df %>%
dplyr::group_by(method) %>%
summarise(mean_sim = mean(percent_agreement))
source("~/CahanLab Dropbox/Dan Peng/PHD_life/FourthYear_2023/OneSC_workfolder_2/benchmark_network_inference_real/scripts/ss_similarity.R", echo=TRUE)
plot_df %>%
dplyr::group_by(method) %>%
summarise_at(vars(percent_agreement), mean)
plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean)
plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean) %>%
sort()
?sort
plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean)
plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean) %>%
arange(percent_agreement)
plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean) %>%
arrange(percent_agreement)
cat_ss = plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean) %>%
arrange(percent_agreement)
plot_df$methods = factor(plot_df$methods, levels = cat_ss$methods)
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Methods") +
xlab("Data Type") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_flip()
p
ggsave(filename = file.path(output_path, paste0(datatype, ".png")), plot = p, width = 5, height = 8)
library(ggplot2)
library(cowplot)
library(ggrepel)
library(data.table)
data_type = 'myeloid_progenitors_full'
##### this is to just plot the correlation similarity #####
UMAP_coord = read.csv(file.path('../output/plot_UMAPs/', data_type, "UMAP_coord.csv"), row.names = 1)
correlation_df = fread(file.path("../output/plot_UMAPs/", data_type, "correlation_mat.csv"))
rownames(correlation_df) = correlation_df$V1
correlation_df$V1 = NULL
UMAP_coord$cell_types = rownames(correlation_df)[apply(correlation_df, MARGIN = 2, FUN = which.max)]
p = ggplot(UMAP_coord, aes(sim_time, sample, fill= cell_types)) +
geom_tile() +
scale_fill_brewer(palette = "Set2") +
theme_half_open() +
facet_grid(
rows = vars(steady_states),
scales = "free_y",
space = "free_y",
switch = "x"
) +
theme(
panel.spacing = unit(x = 0.2, units = "lines"),
strip.background = element_blank(),
strip.text.y = element_text(angle = 0),
#axis.text.x=element_blank(), #remove x axis labels
#axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
ylab("Simulation Runs") +
xlab("Simulation Steps")
p
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "corr_sim_heatmap.png")), plot = p, width = 8, height = 12)
##### this is to just plot the distance #####
UMAP_coord = read.csv(file.path('../output/plot_UMAPs/', data_type, "UMAP_coord.csv"), row.names = 1)
correlation_df = fread(file.path("../output/plot_UMAPs/", data_type, "dist_mat.csv"))
rownames(correlation_df) = correlation_df$V1
correlation_df$V1 = NULL
UMAP_coord$cell_types = rownames(correlation_df)[apply(correlation_df, MARGIN = 2, FUN = which.min)]
p = ggplot(UMAP_coord, aes(sim_time, sample, fill= cell_types)) +
geom_tile() +
scale_fill_brewer(palette = "Set2") +
theme_half_open() +
facet_grid(
rows = vars(steady_states),
scales = "free_y",
space = "free_y",
switch = "x"
) +
theme(
panel.spacing = unit(x = 0.2, units = "lines"),
strip.background = element_blank(),
strip.text.y = element_text(angle = 0),
#strip.text.y = element_blank(),
#axis.text.x=element_blank(), #remove x axis labels
#axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
ylab("Simulation Runs") +
xlab("Simulation Steps")
p
p = ggplot(UMAP_coord, aes(sim_time, sample, fill= cell_types)) +
geom_tile() +
scale_fill_brewer(palette = "Set2") +
theme_half_open() +
facet_grid(
rows = vars(steady_states),
scales = "free_y",
space = "free_y",
switch = "x"
) +
theme(
panel.spacing = unit(x = 0.2, units = "lines"),
strip.background = element_blank(),
strip.text.y = element_text(angle = 0),
#strip.text.y = element_blank(),
#axis.text.x=element_blank(), #remove x axis labels
#axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
ylab("Simulation Runs") +
xlab("Simulation Steps")
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, "dist_sim_heatmap.png")), plot = p, width = 8, height = 12)
library(ggplot2)
library(cowplot)
library(ggrepel)
data_types = list.dirs("../output/plot_UMAPs", recursive = FALSE, full.names = FALSE)
data_type = 'myeloid_progenitors_full'
UMAP_coord = read.csv(file.path('../output/plot_UMAPs/', data_type, "UMAP_coord.csv"), row.names = 1)
correlation_df = read.csv(file.path("../output/plot_UMAPs/", data_type, "dist_mat.csv"), row.names = 1)
UMAP_coord$cell_types = rownames(correlation_df)[apply(correlation_df, MARGIN = 2, FUN = which.min)]
UMAP_coord[UMAP_coord$steady_states == 'other', 'cell_types'] = 'other'
for(time_step in unique(UMAP_coord$sim_time)) {
sub_UMAP_coord = UMAP_coord[UMAP_coord$sim_time <= time_step, ]
p = ggplot(sub_UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c() +
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, 'animation_folder', paste0(time_step, "_UMAP.png"))), plot = p, width = 5, height = 4)
}
p
library(ggplot2)
library(cowplot)
library(ggrepel)
data_types = list.dirs("../output/plot_UMAPs", recursive = FALSE, full.names = FALSE)
data_type = 'myeloid_progenitors_full'
UMAP_coord = read.csv(file.path('../output/plot_UMAPs/', data_type, "UMAP_coord.csv"), row.names = 1)
correlation_df = read.csv(file.path("../output/plot_UMAPs/", data_type, "dist_mat.csv"), row.names = 1)
UMAP_coord$cell_types = rownames(correlation_df)[apply(correlation_df, MARGIN = 2, FUN = which.min)]
UMAP_coord[UMAP_coord$steady_states == 'other', 'cell_types'] = 'other'
for(time_step in unique(UMAP_coord$sim_time)) {
sub_UMAP_coord = UMAP_coord[UMAP_coord$sim_time <= time_step, ]
p = ggplot(sub_UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c()
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, 'animation_folder', paste0(time_step, "_UMAP.png"))), plot = p, width = 5, height = 4)
}
p1 = ggplot(UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=cell_types)) +
geom_point() +
scale_color_brewer(palette = "Set2") +
theme_half_open() +
labs(color = "Cell Types") +
ylab('UMAP_2') +
xlab('UMAP_1') +
theme(text = element_text(size = 14),
axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(),  # Remove x-axis ticks
axis.text.y = element_blank(),  # Remove y-axis labels
axis.ticks.y = element_blank(), # Remove y-axis ticks
legend.position = 'right')
p1
time_step
p = ggplot(sub_UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c()
p
for(time_step in unique(UMAP_coord$sim_time)) {
sub_UMAP_coord = UMAP_coord[UMAP_coord$sim_time <= time_step, ]
p = ggplot(sub_UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c() +
xlim(c(-5, 20)) +
ylim(c(-6, 18))
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, 'animation_folder', paste0(time_step, "_UMAP.png"))), plot = p, width = 5, height = 4)
}
for(time_step in unique(UMAP_coord$sim_time)) {
sub_UMAP_coord = UMAP_coord[UMAP_coord$sim_time <= time_step, ]
p = ggplot(sub_UMAP_coord, aes(x=UMAP_1, y=UMAP_2, color=sim_time)) +
geom_point() +
theme_half_open() +
labs(color = 'Simulation Steps') +
scale_colour_viridis_c() +
xlim(c(-5, 20)) +
ylim(c(-6, 18))
ggsave(filename = file.path(file.path('../output/plot_UMAPs/', data_type, 'animation_folder', paste0(time_step, "_UMAP.png"))), plot = p, width = 5, height = 4)
}
library(ggplot2)
library(stringr)
library(dplyr)
library(viridis)
library(cowplot)
output_path = "../output/sim_ss_comparison"
dir.create(output_path, recursive = TRUE)
datatype = 'myeloid_progenitors_full'
ss_path = "../output/extract_states/myeloid_progenitors_full/"
curate_ss <- function(ss_path) {
state_df = data.frame()
for(temp_file in list.files(ss_path)) {
temp_state_df = read.csv(file.path(ss_path, temp_file), row.names = 1)
if(ncol(state_df) == 0) {
state_df = temp_state_df
} else {
state_df = cbind(state_df, temp_state_df)
}
}
state_df = state_df[!duplicated(as.list(state_df))]
return(state_df)
}
calc_max_sim <- function(reference_state, sim_states) {
all_percent_agree = c()
for(unique_ss in colnames(sim_states)) {
num_diff = sum(abs(sim_states[, unique_ss] - reference_state))
percent_agree = 1 - (num_diff / length(reference_state))
all_percent_agree = c(all_percent_agree, percent_agree)
}
return(max(all_percent_agree))
}
state_df = curate_ss(ss_path)
plot_df = data.frame()
for(temp_method in list.files(file.path("../output/steady_states/", datatype))) {
print(temp_method)
sim_states = read.csv(file.path("../output/steady_states/", datatype, temp_method, "density/unique_steady_states.csv"), row.names = 1)
for(temp_state in colnames(state_df)) {
print(temp_state)
reference_state = state_df[, temp_state]
temp_plot_df = data.frame('methods' = c(temp_method),
'states' = c(temp_state),
'percent_agreement' = calc_max_sim(reference_state, sim_states))
plot_df = rbind(plot_df, temp_plot_df)
}
}
##### get the iqcell steady states ######
pt_paths = list.dirs("../output/iQcell_simulations/myeloid_progenitors_full/", recursive = FALSE, full.names = FALSE)
multiple_read_df <- function(x) {
return(read.csv(file.path("../output/iQcell_simulations/myeloid_progenitors_full/", x, "in_out/ABNfiles/9.2_profilesOutput.csv"), stringsAsFactors=FALSE))
}
all_iqcell_states = lapply(pt_paths, multiple_read_df) %>%
Reduce(function(x, y) rbind(x, y), .) %>%
t()
all_iqcell_states = all_iqcell_states[rownames(state_df), ]
all_iqcell_states = as.data.frame(all_iqcell_states)
all_iqcell_states =  all_iqcell_states %>% mutate_all(as.numeric)
#all_iqcell_states = as.numeric(all_iqcell_states)
for(temp_state in colnames(state_df)) {
print(temp_state)
reference_state = state_df[, temp_state]
temp_plot_df = data.frame('methods' = c('iQcell'),
'states' = c(temp_state),
'percent_agreement' = calc_max_sim(reference_state, all_iqcell_states))
plot_df = rbind(plot_df, temp_plot_df)
}
plot_df = plot_df[plot_df$states %in% c('Erythrocytes', 'Granulocytes', 'Monocytes', 'MK'), ]
plot_df$percent_agreement = round(plot_df$percent_agreement, 2)
plot_df[plot_df$methods == 'run_OneSC', 'methods'] = 'OneSC'
plot_df$methods = toupper(plot_df$methods)
cat_ss = plot_df %>%
dplyr::group_by(methods) %>%
summarise_at(vars(percent_agreement), mean) %>%
arrange(percent_agreement)
plot_df$methods = factor(plot_df$methods, levels = cat_ss$methods)
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Methods") +
xlab("Data Type") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_flip()
p
p
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Steady States") +
xlab("Methods") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_flip()
p
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Terminal States") +
xlab("Methods") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_flip()
o
p
p = ggplot(plot_df, aes(x = methods, y = states, fill= percent_agreement)) +
geom_tile() +
geom_text(aes(label = percent_agreement)) +
ylab("Steady States") +
xlab("Methods") +
scale_fill_viridis(discrete=FALSE) +
guides(fill=guide_legend(title="Top \nSteady States \nSimilarity")) +
theme_half_open() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_flip()
ggsave(filename = file.path(output_path, paste0(datatype, ".png")), plot = p, width = 5, height = 8)
